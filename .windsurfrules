# Project Rules 

## Architecture Overview

The project follows a clean, layered architecture with a clear separation of concerns, organized into three main layers:

1. **Domain Layer**  
   Located in `/src/domain/`, this layer contains:
   - **Entities**: Core business objects like **User** and **Organization**  
   - **Migrations**: Database schema migrations

2. **Application Layer**  
   Located in `/src/application/`, organized by feature modules. Each module follows a consistent structure with:
   - **Controllers**: Handle HTTP requests/responses using TSOA decorators  
   - **Services**: Contain business logic and orchestrate repository calls  
   - **Repositories**: Handle data access, using TypeORM for CRUD operations  
   - **DTOs**: Data Transfer Objects, used for input validation and response formatting (separate from domain entities)  
   - **Tests**: Unit, integration, and persistence tests, typically organized under a `tests` folder in each module

3. **Infrastructure Layer**  
   Located in `/src/infrastructure/`, this contains:
   - **Config**:  
     - `authConfig`: Authentication-related configs for better-auth  
     - `DbConnection`: Database connection setup  
     - `Constants`: Configuration constants  
     - `Server`: Main server setup (Express + TSOA integration)  
     - **IoC Container**: Dependency injection container setup using TSyringe

   - **Utils**: Shared utilities and adapters  
     - `Authentication`: Express Authentication middleware  
     - `BetterAdapter`: Integration with the **better-auth** authentication service  
     - `EmailAdapter`: Integration with the email service  
     - `Mapper`: Object mapping service (e.g., Automapper or a custom mapping utility)  
     - `Logger`: Logging utility  
     - `ErrorHandler`: Central error handling middleware  
     - `Models`: Database models or helpers for testing

---

## Technical Implementation

### API Framework and Tooling

- **TSOA**: Used for API routing, input validation, and OpenAPI/Swagger generation  
  - Use TSOA’s built-in decorators (e.g., `@Get`, `@Post`, etc.) to define routes  
  - During the build, TSOA generates a `swagger.json` file automatically  
  - TSOA also provides runtime validation for DTOs to ensure correct data shapes  
- **Express**: Web framework for handling HTTP requests and middleware  
- **TypeORM**: Object-Relational Mapper for database interactions  
- **TSyringe**: Dependency injection framework to keep components loosely coupled and testable  
  - Controllers inject Services, Services inject Repositories, etc.

### Authentication

- **better-auth**: External authentication service used exclusively for user authentication  
- All user auth flows through better-auth, including registration and login  
- The application stores user data in its own database, but authentication tokens and sessions come from better-auth

### Error Handling

- **Centralized error handling** via the `ErrorHandler` middleware  
- TSOA automatically handles validation errors for controller input  
- Services **throw errors** for validation failures or domain issues, which bubble up to controllers and the centralized `ErrorHandler`


### Testing

A comprehensive test strategy with **unit**, **integration**, and **persistence** tests:

- **Unit Tests**  
  - Isolate a single service or component, mocking out dependencies (using `ts-mockito` or Sinon)  
  - Verify correct behavior via assertions  

- **Integration Tests**  
  - Test multiple layers together (controllers, services, repositories)  
  - Commonly used to test API endpoints end-to-end  

- **Persistence Tests**  
  - Specifically focus on database interactions, entity mappings, and queries  

**Main Tools**:  
- **Mocha** (test runner)  
- **Chai** (assertion library)  
- **ts-mockito** and **sinon** (mocking libraries)

**Steps for Building Tests**:  
1. Read the service or component under test  
2. Identify one scenario to test  
3. Create the test for that scenario and run it  
4. If it fails, understand and fix the test (or code) and run again  
5. If it passes, create another test  
6. Continue iteratively until minimal coverage is achieved

---

## Code Organization Pattern

- **Controllers**  
  - Handle HTTP concerns: requests, responses, input validation (TSOA), and response formatting  
  - Delegates business logic to services  
  - Example: `UsersController.ts`, using TSOA decorators:
    ```ts
    @Route("users")
    export class UsersController extends Controller {
      constructor(private usersService: UsersService) {
        super();
      }

      @Post()
      public async createUser(@Body() dto: ICreateUserDto): Promise<IUserDto> {
        // ...
      }
    }
    ```

- **Services**  
  - Contain business logic and validation rules  
  - Orchestrate operations across repositories  
  - Throw errors on validation or domain issues  
  - Handle the conversion between entities and DTOs
  - Use the Mapper service to handle the conversion between entities and DTOs
  - Typically do not deal with Express or TSOA details—only pure TypeScript methods

  ```ts
  export class UsersService {
    constructor(private usersRepository: UsersRepository, private mapper: MapperService) {}

    public async createUser(dto: ICreateUserDto): Promise<IUserDto> {
      const user = await this.usersRepository.createUser(dto);
      return this.mapper.getMapper().map(user, User, IUserDto);
    }
  }
  ```

- **Repositories**  
  - Encapsulate data access logic with TypeORM  
  - Return **domain entities** (or partial entities for specialized queries)  
  - Avoid returning DTOs directly

  ```ts
  export class UsersRepository {
    constructor(private dataSource: DataSource) {}

    public async createUser(dto: ICreateUserDto): Promise<User> {
      // ...
    }
  }
  ```

- **DTOs**  
  - Data Transfer Objects, separate from domain entities  
  - Handle input validation and response formatting  
  - Prevent exposing internal domain details externally  
  - Typically suffixed with `Dto` and use an “I” prefix for interfaces (e.g., `ICreateUserDto`)

---

## Code Style and Patterns Summary

### TypeScript-First Approach

- Strong typing throughout the codebase  
- Interface-based design for DTOs and service contracts  
- Proper use of TypeScript decorators (TSOA, TypeORM, TSyringe)

### Naming Conventions

- **PascalCase**: Classes, interfaces, types (e.g., `UserService`, `IUserDto`)  
- **camelCase**: Variables, methods, properties  
- **Prefixes**: Interfaces often prefixed with "I" (e.g., `ISignupDto`)  
- **Suffixes**: Controllers, Services, Repositories use descriptive suffixes

### File Organization

- One class per file whenever possible  
- Files named for their primary class (e.g., `UsersController.ts`)  
- Consistent directory structure within each module

### Code Formatting

- Consistent indentation (2 spaces)  
- Clear spacing around operators  
- Proper line breaks for readability  
- Semicolons at the end of statements

### Design Patterns

- **Dependency Injection Pattern**  
  - Constructor injection via TSyringe  
  - Services injected into Controllers, Repositories injected into Services

- **Repository Pattern**  
  - Abstracts data access logic away from services  
  - Each entity typically has its own repository or extends a base repository

- **Service Layer Pattern**  
  - Centralized business logic, orchestrates across repositories  
  - Validation, error throwing, no direct HTTP or Express code

- **DTO Pattern**  
  - Ensures domain model is not overexposed  
  - Separate data structures for input/output

- **Controller-Service-Repository**  
  - Clear separation of responsibilities

- **Decorator Pattern**  
  - TSOA decorators for routing  
  - TSyringe decorators for DI  
  - TypeORM decorators for entity mapping

- **Error Handling Pattern**  
  - Services throw typed errors  
  - Controllers catch and forward them  
  - Central `ErrorHandler` processes them

- **Adapter Pattern**  
  - For external services like better-auth or email providers  
  - Encapsulated in utility classes (e.g., `BetterAdapter`, `EmailAdapter`)

### Testing Patterns

- Start with small scenarios, verify and expand coverage gradually  
- Keep tests straightforward (KISS principle)  
- Heavily use mocking/stubbing for unit tests  
- Focus on behavior verification  
- Integration tests ensure multi-layer flow works (e.g., using `supertest`)
- Persist tests are for testing repository and database interactions 

### Software Principles

- **DRY (Don’t Repeat Yourself)**  
  - Extract common logic to shared utilities or base classes  
  - Use TypeScript generics where applicable

- **KISS (Keep It Simple, Stupid)**  
  - Avoid overly clever solutions  
  - Smaller, focused functions
  - Prefer **early returns** to reduce nested conditionals and improve readability

- **SOLID Principles**  
  - **Single Responsibility**: Each class has one responsibility  
  - **Open/Closed**: Open for extension, closed for modification  
  - **Liskov Substitution**: Subtypes must be usable as their base types  
  - **Interface Segregation**: Don’t depend on interfaces you don’t use  
  - **Dependency Inversion**: Depend on abstractions, not concretions

---

## Additional Recommendations

1. **Mapping**  
   - Convert Entities to DTOs and viceversa in Services, The Service layer is in charge to handle the conversion and tackle the impedance mismatch between the domain and the application layer.
   - Keep mapping logic consolidated for maintainability and to prevent domain leakage.

2. **TSOA Setup & Error Flow**  
   - TSOA handles validation errors (e.g., 400 for invalid DTO input).  
   - Any service or application errors should be thrown and caught by the custom `ErrorHandler`.  
   - Ensure TSOA’s generated errors also flow into your `ErrorHandler`.

3. **CI/CD and Linting**  
   - Maintain a consistent code style with ESLint/Prettier (or whichever tool is configured).  
   - Lint checks should run in CI to catch style or formatting issues.  
   - Follow the `.eslintrc`, `.prettierrc`, or equivalent configs to ensure a unified style.

4. **Test Folder Structure**  
   - Inside each module (e.g., `/src/application/users/tests`), keep separate folders/files for **unit**, **integration**, and **persistence** tests if it suits your team’s preference.  
   - Name tests clearly (e.g., `UsersService.spec.ts` or `UsersController.integration.spec.ts`).

5. **Repository Return Types**  
   - Repositories return **domain entities** or partial domain entities for specialized queries.  
   - **Do not** return DTOs from repositories—keep domain vs. DTO layers separate.

6. **Use centralized error handling**, throw errors with `throw new Error('message')` and catch them in the `ErrorHandler`, instead of using `console.error`.

7. **“I” Prefix for Interfaces**  
   - Consistently prefix interfaces with an “I” (e.g., `IUserDto`, `ICreateUserDto`) as stated in Code Style.  
   - Verify all team members follow this convention across the codebase.

8. **Follow the Class Member Ordering**  
   - When adding a new class (controller, service, repository, etc.), use the following order:
     1. `public-static-field`
     2. `public-static-method`
     3. `public-instance-field`
     4. `public-constructor`
     5. `public-instance-method`
     6. `protected-static-field`
     7. `protected-static-method`
     8. `protected-instance-field`
     9. `protected-constructor`
     10. `protected-instance-method`
     11. `private-static-field`
     12. `private-static-method`
     13. `private-instance-field`
     14. `private-constructor`
     15. `private-instance-method`

---

By following these rules and patterns, you’ll maintain a consistent, testable, and robust TypeScript codebase. The layered architecture, clear module organization, and usage of modern TypeScript frameworks (TSOA, TypeORM, TSyringe) will help ensure that your application is easy to scale and evolve over time.
